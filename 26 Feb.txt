Consider the below code to answer further questions:
import numpy as np
list_ = [ ‘1’ , ’2’ , ‘3’ , ‘4’ , ‘5’ ]
array_list = np.array(object = list_)
Q1. Is there any difference in the data type of variables list_ and array_list? If there is then write a code
to print the data types of both the variables.
Ans:- there is a difference in the data type of variables list_ and array_list.

list_ is a list variable, which can store elements of different data types.
array_list is an array list variable, which can only store elements of the same data type.

To print the data types of both the variables

import numpy as np

list_ = [ '1' , '2' , '3' , '4' , '5' ]
array_list = np.array(object = list_)

print(type(list_))
print(type(array_list))

Output:
<class 'list'>
<class 'numpy.ndarray'>
The list_ variable is a Python list, which is a mutable data structure that can store elements of any data type. The array_list variable is a NumPy array, which is a fixed-size data structure that can only store elements of the same data type.

In this case, the NumPy array will store all of the elements of the Python list as strings, since that is the data type of the first element.

Q2. Write a code to print the data type of each and every element of both the variables list_ and
arra_list.
Ans:- The data type of each and every element of both the variables list_ and array_list

import numpy as np

list_ = [ '1' , '2' , '3' , '4' , '5' ]
array_list = np.array(object = list_)

# Print the data type of each and every element of both the variables list_ and array_list
for i in range(len(list_)):
  print(type(list_[i]), type(array_list[i]))

Output:
<class 'str'> <class 'numpy.str_'>
<class 'str'> <class 'numpy.str_'>
<class 'str'> <class 'numpy.str_'>
<class 'str'> <class 'numpy.str_'>
<class 'str'> <class 'numpy.str_'>
As you can see, the data type of all the elements in the list_ variable is str, and the data type of all the elements in the array_list variable is numpy.str_.

Q3. Considering the following changes in the variable, array_list:
array_list = np.array(object = list_, dtype = int)
Will there be any difference in the data type of the elements present in both the variables, list_ and
arra_list? If so then print the data types of each and every element present in both the variables, list_
and arra_list.
Ans:-  There will be a difference in the data type of the elements present in both the variables after the following changes in the variable, array_list

array_list = np.array(object = list_, dtype = int)

The np.array() function creates a NumPy array from the given object. The dtype parameter specifies the data type of the elements in the array. In this case, we are specifying the data type as int.

This means that all of the elements in the array_list variable will be converted to integers.

To print the data types of each and every element present in both the variables, list_ and array_list

import numpy as np

list_ = [ '1' , '2' , '3' , '4' , '5' ]
array_list = np.array(object = list_, dtype = int)

# Print the data type of each and every element of both the variables list_ and array_list
for i in range(len(list_)):
  print(type(list_[i]), type(array_list[i]))

Output:
<class 'str'> <class 'numpy.int64'>
<class 'str'> <class 'numpy.int64'>
<class 'str'> <class 'numpy.int64'>
<class 'str'> <class 'numpy.int64'>
<class 'str'> <class 'numpy.int64'>


Yes, there will be a difference in the data type of the elements present in both the variables after the following changes in the variable, array_list:

Python
array_list = np.array(object = list_, dtype = int)
Use code with caution. Learn more
The np.array() function creates a NumPy array from the given object. The dtype parameter specifies the data type of the elements in the array. In this case, we are specifying the data type as int.

This means that all of the elements in the array_list variable will be converted to integers.

To print the data types of each and every element present in both the variables, list_ and array_list, we can use the following code:

Python
import numpy as np

list_ = [ '1' , '2' , '3' , '4' , '5' ]
array_list = np.array(object = list_, dtype = int)

# Print the data type of each and every element of both the variables list_ and array_list
for i in range(len(list_)):
  print(type(list_[i]), type(array_list[i]))
Use code with caution. Learn more
Output:

<class 'str'> <class 'numpy.int64'>
<class 'str'> <class 'numpy.int64'>
<class 'str'> <class 'numpy.int64'>
<class 'str'> <class 'numpy.int64'>
<class 'str'> <class 'numpy.int64'>

As you can see, the data type of the elements in the array_list variable has changed from str to int64. This is because the array_list variable is now an array of integers.


Consider the below code to answer further questions:
import numpy as np
num_list = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ]
num_array = np.array(object = num_list)
Q4. Write a code to find the following characteristics of variable, num_array:
(i) shape
(ii) size
Ans:- To find the shape and size of the num_array variable

import numpy as np

num_list = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ]
num_array = np.array(object = num_list)

# Print the shape of the num_array variable
print(num_array.shape)

# Print the size of the num_array variable
print(num_array.size)

Output:

(2, 3)
6

Q5. Write a code to create numpy array of 3*3 matrix containing zeros only, using a numpy array
creation function.
[Hint: The size of the array will be 9 and the shape will be (3,3).]
Ans:- To create a NumPy array of a 3x3 matrix containing zeros only, using a NumPy array creation function.

import numpy as np

# Create a NumPy array of a 3x3 matrix containing zeros only
zeros_matrix = np.zeros((3, 3))

# Print the zeros_matrix
print(zeros_matrix)

Output:

[[0. 0. 0.]
 [0. 0. 0.]
 [0. 0. 0.]]

Q6. Create an identity matrix of shape (5,5) using numpy functions?
[Hint: An identity matrix is a matrix containing 1 diagonally and other elements will be 0.]
Ans:- 
To create an identity matrix of shape (5,5) using NumPy functions.

import numpy as np

# Create a 5x5 identity matrix
identity_matrix = np.eye(5)

# Print the identity_matrix
print(identity_matrix)

Output:

[[1. 0. 0. 0. 0.]
 [0. 1. 0. 0. 0.]
 [0. 0. 1. 0. 0.]
 [0. 0. 0. 1. 0.]
 [0. 0. 0. 0. 1.]]
 
The np.eye() function creates a new NumPy array of the specified shape and data type, with ones on the main diagonal and zeros everywhere else. In this case, we are specifying the shape as (5, 5) and the data type as float64 (the default data type). This means that the identity_matrix variable will be a 5x5 matrix of floating-point numbers, with ones on the main diagonal and zeros everywhere else.

We could also specify the data type as int or any other NumPy data type. For example, the following code would create a 5x5 identity matrix of integers:

import numpy as np

# Create a 5x5 identity matrix
identity_matrix = np.eye(5, dtype=int)

# Print the identity_matrix
print(identity_matrix)

Output:

[[1 0 0 0 0]
 [0 1 0 0 0]
 [0 0 1 0 0]
 [0 0 0 1 0]
 [0 0 0 0 1]]